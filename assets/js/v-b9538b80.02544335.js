"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[374],{3170:(s,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t=JSON.parse('{"key":"v-b9538b80","path":"/guide/recipes.html","title":"Recipes","lang":"en-US","frontmatter":{"title":"Recipes","sidebarDepth":2,"lastUpdated":true,"sitemap":{"priority":0.8}},"excerpt":"","headers":[{"level":2,"title":"scopes","slug":"scopes","children":[{"level":3,"title":"scopes for project code","slug":"scopes-for-project-code","children":[]},{"level":3,"title":"scopes for business system","slug":"scopes-for-business-system","children":[]}]},{"level":2,"title":"default","slug":"default","children":[{"level":3,"title":"defaultScope","slug":"defaultscope","children":[]},{"level":3,"title":"defaultIssues","slug":"defaultissues","children":[]}]}],"git":{"updatedTime":1655021733000,"contributors":[{"name":"Zhengqbbb","email":"1074059947@qq.com","commits":1}]},"filePathRelative":"guide/recipes.md"}')},8352:(s,n,a)=>{a.r(n),a.d(n,{default:()=>A});var t=a(7293);const p=(0,t.uE)('<h1 id="recipes" tabindex="-1"><a class="header-anchor" href="#recipes" aria-hidden="true">#</a> Recipes</h1><h2 id="scopes" tabindex="-1"><a class="header-anchor" href="#scopes" aria-hidden="true">#</a> scopes</h2><blockquote><p>scopes, usually to define the scope of this commit, there are generally two types: according to the <strong>project code distinction</strong> such as monorepo , the other is <strong>project business distinction</strong></p></blockquote><h3 id="scopes-for-project-code" tabindex="-1"><a class="header-anchor" href="#scopes-for-project-code" aria-hidden="true">#</a> scopes for project code</h3>',4),e=(0,t.Uk)("If you need to manage multiple packages for a better experience, for example use: "),o={href:"https://pnpm.io/",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("pnpm"),l=(0,t.Uk)(" | "),i={href:"https://lerna.js.org/",target:"_blank",rel:"noopener noreferrer"},r=(0,t.Uk)("lerna.js"),u=(0,t.Uk)(" to manage monorepo you can Use the "),k=(0,t._)("code",null,"path",-1),d=(0,t.Uk)(" and "),g=(0,t._)("code",null,"fs",-1),h=(0,t.Uk)(" modules to dynamically define the scopes (scopes) display in the commit message."),m=(0,t.uE)('<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// .commitlintrc.js </span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> packages <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;packages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n    <span class="token literal-property property">scopes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>packages<span class="token punctuation">]</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',1),f=(0,t.Uk)("If you define a "),y=(0,t._)("code",null,"scope-enum",-1),b=(0,t.Uk)(" using the "),v={href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"},q=(0,t.Uk)("commitlint"),x=(0,t.Uk)(" rule, it will be imported automatically."),w=(0,t.uE)('<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// .commitlintrc.js </span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> packages <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;packages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;scope-enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;always&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token operator">...</span>packages <span class="token punctuation">]</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><img src="https://user-images.githubusercontent.com/40693636/172984678-b187607e-e67d-43b4-93e5-3d359f5044a9.gif" alt="demo-gif"></p><h4 id="support-for-multiple-scopes" tabindex="-1"><a class="header-anchor" href="#support-for-multiple-scopes" aria-hidden="true">#</a> Support for multiple scopes</h4><ul><li>use <kbd>→</kbd> or <kbd>Space</kbd> to choice</li><li>use <kbd>Enter</kbd> to submit</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// .commitlintrc.js </span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> packages <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;packages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n    <span class="token literal-property property">scopes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>packages<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">enableMultipleScopes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">scopeEnumSeparator</span><span class="token operator">:</span> <span class="token string">&quot;,&quot;</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div></div><p><img src="https://user-images.githubusercontent.com/40693636/170836009-26331ad3-8e7f-4183-a4af-15372b6420d6.gif" alt="demo-gif"></p><br><br><h3 id="scopes-for-business-system" tabindex="-1"><a class="header-anchor" href="#scopes-for-business-system" aria-hidden="true">#</a> scopes for business system</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// .commitlintrc.js </span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> packages <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;packages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">scopes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;account&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;comment&quot;</span><span class="token punctuation">]</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Of course, if you want to add <strong>description information</strong> to the module-wide customization to display on the command line, you can use <code>name</code> and <code>value</code> to define.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// .commitlintrc.js </span>\n<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> packages <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;packages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">scopes</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>     <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;app:       System business&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;home&quot;</span><span class="token punctuation">,</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;home:      Homepage&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;account&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;account:   Account related&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;comment&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;comment:   Comment related&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><img src="https://user-images.githubusercontent.com/40693636/172988729-b76510d8-108b-4588-a748-86042da3d5ef.gif" alt="demo-gif"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If <code>cz-git</code> detects that <code>allowEmptyScopes</code> and <code>allowCustomScopes</code> have very strict rules (both set to false) and the <strong>scopes selection list has only one item</strong>, it will automatically skip question and output</p></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The following code can get the <code>HOME</code> directory at runtime,<br>you can use it with <code>fs</code> and <code>path</code> <strong>for default global custom configuration</strong>.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">USER_HOME</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">HOME</span> <span class="token operator">||</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">USERPROFILE</span><span class="token punctuation">;</span>\n<span class="token comment">// console.log(USER_HOME) === echo &quot;$HOME&quot;</span>\n</code></pre></div></div><br><br><br><h2 id="default" tabindex="-1"><a class="header-anchor" href="#default" aria-hidden="true">#</a> default</h2><h3 id="defaultscope" tabindex="-1"><a class="header-anchor" href="#defaultscope" aria-hidden="true">#</a> defaultScope</h3>',20),j=(0,t.Uk)("Obtaining the "),_=(0,t._)("code",null,"project scope",-1),S=(0,t.Uk)(" automatically. Good for when there are a lot of scope options (eg components lib, monorepo). "),U=(0,t.Uk)("e.g "),E={href:"https://github.com/Tencent/tdesign-vue-next",target:"_blank",rel:"noopener noreferrer"},I=(0,t.Uk)("tdesign-vue-next"),O=(0,t.Uk)(", which is a vue3 component library with more than 60+ components stored in "),P=(0,t._)("code",null,"src",-1),T=(0,t._)("li",null,"Fortunately, the path structure is clear",-1),C=(0,t._)("li",null,[(0,t.Uk)("We can get the path of the modified file cache through "),(0,t._)("code",null,"git status")],-1),W=(0,t._)("li",null,"Perform string matching interception to obtain scope",-1),z=(0,t._)("li",null,"passed to defaultScope. pin the top of scope list",-1),R=(0,t.uE)('<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// .commitlint.config.js</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> execSync <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// precomputed scope</span>\n<span class="token keyword">const</span> scopeComplete <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">&#39;git status --porcelain || true&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">~</span>r<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;M  src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token operator">?.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\/)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;%%&#39;</span><span class="token punctuation">)</span>\n  <span class="token operator">?.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">src%%((\\w|-)*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;cz-git&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>UserConfig<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">defaultScope</span><span class="token operator">:</span> scopeComplete<span class="token punctuation">,</span>\n    <span class="token literal-property property">customScopesAlign</span><span class="token operator">:</span> <span class="token operator">!</span>scopeComplete <span class="token operator">?</span> <span class="token string">&#39;top-bottom&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;bottom&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div></div><p><img src="https://user-images.githubusercontent.com/40693636/172989830-c3e436ad-adab-42f5-973f-b97f33748939.gif" alt="demo-gif"></p><br><br><h3 id="defaultissues" tabindex="-1"><a class="header-anchor" href="#defaultissues" aria-hidden="true">#</a> defaultIssues</h3><ul><li>Obtaining the <code>Issue Number</code> automatically, it is a very troublesome thing to repeat the query to fill in the <code>issue number</code>. <ul><li>But if the team&#39;s branch command rules are standardized (e.g: feature/issue_33)</li><li>Then we use <code>Node</code>&#39;s <code>execSync</code> to get the branch name through the command</li><li>Then process the obtained string</li><li>Then we use <code>defaultIssues</code></li><li>When using, we only need to press the <kbd>Enter</kbd> key to output the <code>Issue Number</code>, so that we can easily intercept the <code>Issue Number</code> to reduce repetitive work.</li></ul></li></ul>',6),H=(0,t.uE)('<p>We can also combine the <code>customIssuePrefixsAlign</code> configuration item to dynamically change the position of the issue prefix option.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// .commitlintrc.js </span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> execSync <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// @tip: git branch name = feature/issue_33   =&gt;    auto get defaultIssues = #33</span>\n <span class="token keyword">const</span> issue <span class="token operator">=</span> <span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">&#39;git rev-parse --abbrev-ref HEAD&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n\n<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;cz-git&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>UserConfig<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">customIssuePrefixsAlign</span><span class="token operator">:</span> <span class="token operator">!</span>issue <span class="token operator">?</span> <span class="token string">&quot;top&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;bottom&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">defaultIssues</span><span class="token operator">:</span> <span class="token operator">!</span>issue <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>issue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div></div><p><img src="https://user-images.githubusercontent.com/40693636/162552804-132aab02-4b02-4006-9e41-aeae4f825948.gif" alt="demo-gif"></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If <code>cz-git</code> detects that <code>allowCustomIssuePrefixs</code> and <code>allowEmptyIssuePrefixs</code> have very strict rules (both set to false) and the <strong>issuePrefixs selection list has only one item</strong>, it will automatically skip question and output</p></div><br><br><br><blockquote><p>That&#39;s the power of scripting, and the highly customizable <code>cz-git</code> makes committing more convenient and more customary. Welcome to share.</p></blockquote>',8),M={},A=(0,a(8868).Z)(M,[["render",function(s,n){const a=(0,t.up)("ExternalLinkIcon"),M=(0,t.up)("Badge");return(0,t.wg)(),(0,t.iD)("div",null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[c,(0,t.Wm)(a)]),l,(0,t._)("a",i,[r,(0,t.Wm)(a)]),u,k,d,g,h]),m,(0,t._)("p",null,[f,y,b,(0,t._)("a",v,[q,(0,t.Wm)(a)]),x]),w,(0,t._)("ul",null,[(0,t._)("li",null,[j,_,S,(0,t._)("ul",null,[(0,t._)("li",null,[U,(0,t._)("a",E,[I,(0,t.Wm)(a)]),O,P]),T,C,W,z])])]),R,(0,t.Wm)(M,{type:"tip",text:"Tip",vertical:"middle"}),H])}]])}}]);